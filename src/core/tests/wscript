#!/usr/bin/env python

# This file is part of the Ideal Library
# Copyright (C) 2009 Rafael Fernández López <ereslibre@ereslibre.es>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; see the file COPYING.LIB.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

def configure(conf):
    conf.check_cfg(package = 'cppunit', args = '--cflags --libs')
    if not conf.env['HAVE_CPPUNIT'] == 1:
        conf.fatal('Cannot continue without cppunit. Please, install the development package and try again')

def build(bld):
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'any_test.cpp',
        target       = 'anyTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        unit_test    = 1
    )
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'application_test.cpp',
        target       = 'applicationTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        unit_test    = 1
    )
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'bytestream_test.cpp',
        target       = 'byteStreamTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        unit_test    = 1
    )
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'char_test.cpp',
        target       = 'charTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        unit_test    = 1
    )
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'connection_test.cpp',
        target       = 'connectionTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        unit_test    = 1
    )
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'file_test.cpp',
        target       = 'fileTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        #unit_test    = 1
    )
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'reg_exp_test.cpp',
        target       = 'regExpTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        unit_test    = 1
    )
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'string_test.cpp',
        target       = 'stringTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        unit_test    = 1
    )
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'timer_test.cpp',
        target       = 'timerTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        #unit_test    = 1
    )
    bld.new_task_gen(
        features     = 'cxx cprogram',
        source       = 'uri_test.cpp',
        target       = 'uriTest',
        includes     = '.. ../..',
        uselib       = ['CPPUNIT',
                        'IDEAL'],
        uselib_local = 'idealcore',
        install_path = None,
        unit_test    = 1
    )
